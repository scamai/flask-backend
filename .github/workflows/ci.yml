name: CI/CD to EC2
on:
    push:
      branches: [ main, master ] # Only triggers on pushes to main or master
    workflow_dispatch: # Allows manual triggers

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Application Directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.EC2_HOST }}
        username: ${{ vars.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create application directory if it doesn't exist
          sudo mkdir -p /home/ubuntu/flask-backend
          sudo chown ubuntu:ubuntu /home/ubuntu/flask-backend

          # Initialize git srepository if not already initialized
          if [ ! -d "/home/ubuntu/flask-backend/.git" ]; then
            cd /home/ubuntu/flask-backend
            git init
            git remote add origin git@github.com:scamai/flask-backend.git || true
            # The '|| true' ensures the script continues even if the remote already exists
          fi

    - name: Configure GitHub SSH Key
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.EC2_HOST }}
        username: ${{ vars.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Add GitHub SSH key
          echo "${{ secrets.GIT_SSH_KEY }}" > ~/.ssh/github_deploy_key
          chmod 600 ~/.ssh/github_deploy_key
          
          # Configure SSH to use the key for GitHub
          echo "Host github.com" > ~/.ssh/config
          echo "  IdentityFile ~/.ssh/github_deploy_key" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          
          # Add GitHub's host key
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

    - name: Setup System Dependencies and Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.EC2_HOST }}
        username: ${{ vars.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Install basic system dependencies
          sudo apt-get update
          sudo apt-get install -y python3-venv python3-pip curl unzip

          # Install AWS CLI if not present
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            rm -rf aws awscliv2.zip
          fi

          # Install Node.js if not present
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi

          # Install PM2 if not present
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi

          # Ensure pip is installed in the base system
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          sudo python3 get-pip.py
          rm get-pip.py

          # Setup virtual environment
          sudo rm -rf /home/ubuntu/flask-backend/venv
          sudo mkdir -p /home/ubuntu/flask-backend/venv
          sudo chown ${USER}:${USER} /home/ubuntu/flask-backend/venv
          python3 -m venv /home/ubuntu/flask-backend/venv

          # Activate and install base packages
          source /home/ubuntu/flask-backend/venv/bin/activate
          /home/ubuntu/flask-backend/venv/bin/python3 -m pip install --upgrade pip
          /home/ubuntu/flask-backend/venv/bin/pip install torch retina-face efficientnet-pytorch torchvision setuptools

          # Verify installations
          echo "Node version: $(node --version)"
          echo "PM2 version: $(pm2 --version)"
          echo "Python version: $(/home/ubuntu/flask-backend/venv/bin/python3 --version)"
          echo "Pip version: $(/home/ubuntu/flask-backend/venv/bin/pip --version)"
          echo "AWS CLI version: $(aws --version)"

    - name: Download Model Files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.EC2_HOST }}
        username: ${{ vars.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Get hashes of existing files if they exist
          if [ -f "/home/ubuntu/flask-backend/deepfakedefender/weight.pth" ]; then
            local_weight_hash=$(md5sum /home/ubuntu/flask-backend/deepfakedefender/weight.pth | awk '{ print $1 }')
          fi
          if [ -f "/home/ubuntu/flask-backend/deepfakedefender/ema.state" ]; then
            local_ema_hash=$(md5sum /home/ubuntu/flask-backend/deepfakedefender/ema.state | awk '{ print $1 }')
          fi
          
          # Get hashes of S3 files
          s3_weight_hash=$(aws s3api head-object --bucket scamai --key weight.pth --query ETag --output text | tr -d '"')
          s3_ema_hash=$(aws s3api head-object --bucket scamai --key ema.state --query ETag --output text | tr -d '"')
          s3_sbi_hash=$(aws s3api head-object --bucket scamai --key checkpoint_epoch_49_efficientnet-b4_bs_12_epoch_50_imgSize_380.pt --query ETag --output text | tr -d '"')
          
          # Download if files don't exist or hashes don't match
          if [ ! -f "/home/ubuntu/flask-backend/deepfakedefender/weight.pth" ] || [ "$local_weight_hash" != "$s3_weight_hash" ]; then
            echo "Downloading weight.pth from S3..."
            aws s3 cp s3://scamai/weight.pth /home/ubuntu/flask-backend/deepfakedefender/
          else
            echo "weight.pth is up to date"
          fi
          
          if [ ! -f "/home/ubuntu/flask-backend/deepfakedefender/ema.state" ] || [ "$local_ema_hash" != "$s3_ema_hash" ]; then
            echo "Downloading ema.state from S3..."
            aws s3 cp s3://scamai/ema.state /home/ubuntu/flask-backend/deepfakedefender/
          else
            echo "ema.state is up to date"
          fi
          
          if [ ! -f "/home/ubuntu/flask-backend/selfblended/checkpoint_epoch_49_efficientnet-b4_bs_12_epoch_50_imgSize_380.pt" ] || [ "$local_sbi_hash" != "s3_sbi_hash" ]; then
            echo "Downloading checkpoint_epoch_49_efficientnet-b4_bs_12_epoch_50_imgSize_380.pt from S3..."
            aws s3 cp s3://scamai/checkpoint_epoch_49_efficientnet-b4_bs_12_epoch_50_imgSize_380.pt /home/ubuntu/flask-backend/selfblended/
          else
            echo "checkpoint_epoch_49_efficientnet-b4_bs_12_epoch_50_imgSize_380.pt is up to date"
          fi

    - name: Update Code and Deploy Changes
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.EC2_HOST }}
        username: ${{ vars.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Update and deploy application
          cd /home/ubuntu/flask-backend
          git fetch origin
          git reset --hard origin/master
          
          # Install project dependencies
          source /home/ubuntu/flask-backend/venv/bin/activate
          pip install -r requirements.txt
          
          # Kill any remaining gunicorn processes on port 5090
          sudo lsof -t -i:5090 | xargs -r kill -9 || true
          
          # Reset PM2
          pm2 del flask-backend
          sleep 2
          
          # Start PM2 daemon
          pm2 daemon
          sleep 2
          
          # Create a startup script
          cat > start-flask.sh << 'EOL'
          #!/bin/bash
          source /home/ubuntu/flask-backend/venv/bin/activate
          exec /home/ubuntu/flask-backend/venv/bin/gunicorn \
            --workers 1 \
            --threads 2 \
            --bind 0.0.0.0:5090 \
            --timeout 120 \
            --graceful-timeout 30 \
            --max-requests 1000 \
            --max-requests-jitter 50 \
            --worker-class gthread \
            --worker-tmp-dir /dev/shm \
            app:app
          EOL
          
          chmod +x start-flask.sh
          
          # Start the application using the script
          pm2 start ./start-flask.sh \
            --name flask-backend \
            --interpreter=/bin/bash \
            --env PYTHONPATH=/home/ubuntu/flask-backend \
            --env FLASK_APP=app.py \
            --env FLASK_ENV=production
          
          # Ensure the process started
          sleep 5
          pm2 list
          pm2 save --force

    - name: Health Check
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.EC2_HOST }}
        username: ${{ vars.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Wait for application to start
          sleep 20
          
          # Check if process is running
          if ! pm2 show flask-backend > /dev/null 2>&1; then
            echo "Application failed to start"
            exit 1
          fi
          
          # Check if endpoint is responding on port 5090
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5090/health)
          if [ "$response" != "200" ]; then
            echo "Health check failed with status: $response"
            exit 1
          fi
          
          echo "Health check passed successfully"